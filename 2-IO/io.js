/*
Блокирующий I/O
Операции input/output происходят синхронно, одна за другой
===
Используется редко в следующих случаях:
- если необходимо получить данные, без которых работа программы не может начаться. Например, информацию о настройках
- может использоваться в консольных приложениях, у которых только один пользователь
*/
const connection = db.connect();	// подключаемся к базе данных
const users = connection.query('SELECT * FROM users'); // делаем запрос
console.log(users); // выводим информацию в консоль

// ========

/*
Неблокирующий I/O
Неблокирующий I/O происходит асинхронно
===
Первым аргументом колбэка, переданного в db.connect(), является ошибка. 
Если ошибка имеется, то в нашем примере происходит "проброс исключения", в результате которого эта ошибка либо будет обработана в коде выше, 
либо вывалится в рантайм и "повалит" приложение. Если ошибки нет - error === null (в логическом контексте false) - функция переходит к работе с базой данных: выполняет connection.query() и console.log().

В данном примере программа вызывает db.connect(), ставит его колбэк в очередь 
и переходит к выполнению оставшейся синхронной части кода. 
Когда весь синхронный код выполнен, программа возвращается к выполнению колбэка db.connect().
*/
db.connect((error, connection) => {
  if (error) throw error;
  connection.query('SELECT * FROM users', users => {
    console.log(users);
  });
});